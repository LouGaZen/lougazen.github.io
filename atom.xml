<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Apocalypse</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lougazen.github.io/"/>
  <updated>2020-03-02T05:53:24.235Z</updated>
  <id>http://lougazen.github.io/</id>
  
  <author>
    <name>LouGaZen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iPhone 5s降级iOS 10.3.3简要备忘</title>
    <link href="http://lougazen.github.io/2020/03/02/iPhone-5s%E9%99%8D%E7%BA%A7iOS-10-3-3%E7%AE%80%E8%A6%81%E5%A4%87%E5%BF%98/"/>
    <id>http://lougazen.github.io/2020/03/02/iPhone-5s降级iOS-10-3-3简要备忘/</id>
    <published>2020-03-02T05:04:07.000Z</published>
    <updated>2020-03-02T05:53:24.235Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>好像好久都没有更新博客了，还是要养成做记录的习惯。</p><p>偶然看到5s可以降级iOS 10.3.3的帖子，二话不说GKD。中途遇到一些问题在此做个备忘</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p> 1.一台正常运行的iPhone 5s<br> 2.macOS with python3 environment<br> 3.科学上网</p><h2 id="正式开始"><a href="#正式开始" class="headerlink" title="正式开始"></a>正式开始</h2><p> 1.到<a href="https://github.com/MatthewPierson/Vieux" target="_blank" rel="noopener">https://github.com/MatthewPierson/Vieux</a>把降级脚本克隆下来，然后去<a href="https://ipsw.me" target="_blank" rel="noopener">https://ipsw.me</a>下载对应型号的iOS 10.3.3固件到脚本所在目录<br> 2.执行<code>sudo pip3 install -r requirement.txt</code>安装所需包（可能需要科学上网）<br> 3.手机连上电脑进入DFU模式（如何进入DFU可以看<a href="https://zh.ifixit.com/Guide/iPhone+4+-+4S+-+5+-+5S+-+5c+-+6+-+6S+-+%E5%A6%82%E4%BD%95%E5%9C%A8DFU%E6%A8%A1%E5%BC%8F%E5%88%B7%E6%9C%BA%E3%80%82%E5%AF%86%E7%A0%81%E6%81%A2%E5%A4%8D%E3%80%82/28229" target="_blank" rel="noopener">这里</a>）<br> 3.执行<code>sudo python3 vieux -i ➕上固件所在路径</code><br> 4.等待脚本撞bug。按照漏洞发现者的说法这个漏洞并不是100%成功，没有撞成功重试即可，成功的标志是手机闪一下绿屏。绿屏过后就会自己恢复10.3.3固件</p><p> <img src="https://i.loli.net/2020/03/02/tKhObEuIjQLPqM1.png" alt="降级成功"></p><h2 id="奇难杂症"><a href="#奇难杂症" class="headerlink" title="奇难杂症"></a>奇难杂症</h2><h3 id="No-Module-Found"><a href="#No-Module-Found" class="headerlink" title="No Module Found"></a>No Module Found</h3><p> 这个我是感觉最坑爹的地方，pip3安装说成功，<code>pip3 list</code>也有list出来，但是执行的时候却报错，一看<code>pip3 --version</code>下巴都掉了</p><p> <img src="https://i.loli.net/2020/03/02/TraXm5hLEo34j89.png" alt="pip3 --version"></p> <figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/03/02/p5olFN8YBrPxDZ9.png" alt="坑" title="">                </div>                <div class="image-caption">坑</div>            </figure><p> 爬了一下google，发现pip的命令可以用<code>python3 -m pip ...</code>代替，所以上述第二步的安装环境可以执行<code>sudo python3 -m pip install -r requirements.txt</code></p><h3 id="No-Backend-Available"><a href="#No-Backend-Available" class="headerlink" title="No Backend Available"></a>No Backend Available</h3><p> 这个一开始以为是包的问题，用pip install补上后发现问题依旧，然后去脚本仓库找有没有相关的issue，嚯还真有，解决办法是通过brew安装，即<code>brew install libusb</code></p><p> <img src="https://i.loli.net/2020/03/02/YzLmIZRJtuWOHi5.png" alt="No Backend Available"></p><h2 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h2><blockquote><p><a href="https://www.feng.com/post/12857994" target="_blank" rel="noopener">5s降级10.3.3不是很难，就是需要仔细，你就可以完成降级</a><br><a href="https://github.com/MatthewPierson/Vieux" target="_blank" rel="noopener">Vieux - A tool for 32/64 Bit iOS downgrades using OTA Blobs</a><br><a href="https://stackoverflow.com/questions/51055429/why-pip3-install-in-python2-sitepackages" target="_blank" rel="noopener">Why pip3 install in python2 sitepackages</a><br><a href="https://www.nazhuo.work/index.php/archives/11/" target="_blank" rel="noopener">使用 Vieux 将 iphone5s 降级到 10.3.3</a><br><a href="https://zh.ifixit.com/Guide/iPhone+4+-+4S+-+5+-+5S+-+5c+-+6+-+6S+-+%E5%A6%82%E4%BD%95%E5%9C%A8DFU%E6%A8%A1%E5%BC%8F%E5%88%B7%E6%9C%BA%E3%80%82%E5%AF%86%E7%A0%81%E6%81%A2%E5%A4%8D%E3%80%82/28229" target="_blank" rel="noopener">iPhone 4 / 4S / 5 / 5S / 5c / 6 / 6S - 如何在DFU模式刷机。密码恢复。</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h2&gt;&lt;p&gt;好像好久都没有更新博客了，还是要养成做记录的习惯。&lt;/p&gt;
&lt;p&gt;偶然看到5s可以降级iOS 10.3.3的帖子，二话不说GKD。中途遇到一些问题在
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>入手一台服务器后的一些必备操作</title>
    <link href="http://lougazen.github.io/2019/12/23/%E5%85%A5%E6%89%8B%E4%B8%80%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%90%8E%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BF%85%E5%A4%87%E6%93%8D%E4%BD%9C/"/>
    <id>http://lougazen.github.io/2019/12/23/入手一台服务器后的一些必备操作/</id>
    <published>2019-12-23T08:17:24.000Z</published>
    <updated>2020-03-02T05:39:47.288Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>无意中看到腾讯云服务器的<a href="https://cloud.tencent.com/act/campus?fromSource=gwzcw.1293314.1293314.1293314&amp;cps_key=db0b88ca8f49ff0684eddea9ae6bb50b" target="_blank" rel="noopener">活动</a><del>（Pony麻烦结一下广告费谢谢）</del>，趁着现在还不够25岁赶紧续了3次每次最多续1年</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/23/dAZz8sf3TKNxjkY.png" alt="Pony Ma亏得都要坐公交了" title="">                </div>                <div class="image-caption">Pony Ma亏得都要坐公交了</div>            </figure><h2 id="修改root密码"><a href="#修改root密码" class="headerlink" title="修改root密码"></a>修改root密码</h2><p>拿到服务器第一步就是把默认那个又长又难记的密码改掉</p><p>在命令行执行<code>passwd</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/23/ZJFX53jydVRfSxc.png" alt="passwd" title="">                </div>                <div class="image-caption">passwd</div>            </figure><p>修改成功后记得新开个tab测试新密码能否登陆再退出当前会话</p><h2 id="配置服务器免密登陆ssh-keygen"><a href="#配置服务器免密登陆ssh-keygen" class="headerlink" title="配置服务器免密登陆ssh-keygen"></a>配置服务器免密登陆ssh-keygen</h2><p>先查看本机有没有生成过ssh的公钥和私钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br><span class="line">ls -al</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/24/ATaymv9Re6NQ4gB.png" alt="公钥和私钥" title="">                </div>                <div class="image-caption">公钥和私钥</div>            </figure><p>红框中的两个文件分别存放着私钥和公钥，如果没有这两个文件就按以下步骤来</p><p>执行<code>ssh-keygen</code>然后按三下回车</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/24/BCjFrIUNmEKqw7o.png" alt="ssh-keygen" title="">                </div>                <div class="image-caption">ssh-keygen</div>            </figure><p>现在再去查看就有公钥的信息了</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/24/Q9Jc2EhPaGAkgbI.png" alt="id_rsa.pub" title="">                </div>                <div class="image-caption">id_rsa.pub</div>            </figure><p>然后把这段公钥上传到目标服务器的<code>~/.ssh/authorized_keys</code>文件当中</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/24/K64XikdOT1CBmQ5.png" alt="authorized_keys" title="">                </div>                <div class="image-caption">authorized_keys</div>            </figure><p>测试一下，现在可以不用密码顺利登陆进来了</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/24/W3XUaY7IlskCTiy.png" alt="免密登陆" title="">                </div>                <div class="image-caption">免密登陆</div>            </figure><p>！！！注意：万一电脑丢失记得上服务器把该机器的公钥删掉</p><h2 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h2><p>服务器到手的时候自带了firewalld但是并没有启动，使用<code>firewall-cmd --state</code>命令可以查看firewall的运行状态</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/24/SCoQvKqa1sgHDGJ.png" alt="firewall-cmd --state" title="">                </div>                <div class="image-caption">firewall-cmd --state</div>            </figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> firewalld <span class="comment"># 启用自动启动</span></span><br><span class="line">systemctl start firewalld <span class="comment"># 启动</span></span><br></pre></td></tr></table></figure><p>成功的话再次查看状态会显示running</p><p>把常用的服务和端口加入允许列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --zone=public --add-service=http</span><br><span class="line">firewall-cmd --permanent --zone=public --add-service=https</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><h2 id="修改ssh默认端口"><a href="#修改ssh默认端口" class="headerlink" title="修改ssh默认端口"></a>修改ssh默认端口</h2><p><del>稍有常识的人</del> 众所周知ssh默认端口是22，如果不加以修改很容易被人攻击</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/24/32Xz8Ujdotqrx5F.png" alt="一夜过后被尝试889次登录" title="">                </div>                <div class="image-caption">一夜过后被尝试889次登录</div>            </figure><p>（题外话使用<code>lastb</code>命令可以查看尝试登录的客户端信息，如果信息太多则<code>lastb &gt; fail.log</code>重定向到本地文件再查看）</p><p>ssh端口的配置存放在<code>/etc/ssh/sshd_config</code>中，直接在<code># Port 22</code>下一行添加</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Port 22</span><br><span class="line">Port （你目标的端口）</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/24/ZbrtGuv4PpnTKcg.png" alt="sshd_config" title="">                </div>                <div class="image-caption">sshd_config</div>            </figure><p>加上22端口是防止现在的连接失效，万一你添加的端口被防火墙屏蔽的那就gg了</p><p>然后再添加个防火墙允许规则</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=（你目标的端口）/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>重启ssh服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart sshd.service</span><br></pre></td></tr></table></figure><p>不要关闭当前连接，新开个tab尝试能否连接成功，成功后再去把22端口删掉</p><p>端口修改后跟ssh相关的命令要带端口参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh root@xxx.xx -p 123</span><br><span class="line">sftp -P 123 root@xxx.xx</span><br><span class="line">scp -P 123 ......</span><br></pre></td></tr></table></figure><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><p>按照官方的<a href="https://docs.docker.com/install/linux/docker-ce/centos/" target="_blank" rel="noopener">文档</a>把下面命令执行一遍就行了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-engine</span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><h2 id="使用docker启动nginx"><a href="#使用docker启动nginx" class="headerlink" title="使用docker启动nginx"></a>使用docker启动nginx</h2><p>首先在srv目录创建文件夹，用于放置ssl证书及nginx配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /srv/nginx-data/conf/cert</span><br></pre></td></tr></table></figure><p>把申请到的证书放在<code>/srv/nginx-data/conf/cert</code>目录下</p><p>在<code>/srv/nginx-data/conf</code>目录下创建一个<code>index.conf</code>的文件，内容如下</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 使非www域名自动跳转到带www的域名</span></span><br><span class="line">server &#123;</span><br><span class="line"><span class="code">    listen *:80;</span></span><br><span class="line"><span class="code">    listen *:443 ssl http2;</span></span><br><span class="line"><span class="code">    listen [::]:80;</span></span><br><span class="line"><span class="code">    listen [::]:443 ssl http2;</span></span><br><span class="line"><span class="code">    server_name 自己的域名;</span></span><br><span class="line"></span><br><span class="line"><span class="code">    ssl_certificate SSL证书;</span></span><br><span class="line"><span class="code">    ssl_certificate_key SSL证书;</span></span><br><span class="line"><span class="code">    return 301 https://www.自己的域名$request_uri;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section"># 使http自动跳转到https</span></span><br><span class="line">server &#123;</span><br><span class="line"><span class="code">    listen *:80;</span></span><br><span class="line"><span class="code">    listen [::]:80;</span></span><br><span class="line"><span class="code">    server_name www.自己的域名;</span></span><br><span class="line"><span class="code">    return 301 https://www.自己的域名$request_uri;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line"><span class="code">    listen *:443 ssl http2;</span></span><br><span class="line"><span class="code">    listen [::]:443 ssl http2;</span></span><br><span class="line"><span class="code">    server_name www.自己的域名;</span></span><br><span class="line"><span class="code">    ssl_certificate SSL证书;</span></span><br><span class="line"><span class="code">    ssl_certificate_key SSL证书;</span></span><br><span class="line"></span><br><span class="line"><span class="code">    #charset koi8-r;</span></span><br><span class="line"><span class="code">    #access_log  /var/log/nginx/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line"><span class="code">    location / &#123;</span></span><br><span class="line"><span class="code">        root   /usr/share/nginx/html;</span></span><br><span class="line"><span class="code">        index  index.html index.htm;</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="code">    #error_page  404              /404.html;</span></span><br><span class="line"></span><br><span class="line"><span class="code">    # redirect server error pages to the static page /50x.html</span></span><br><span class="line"><span class="code">    #</span></span><br><span class="line"><span class="code">    error_page   500 502 503 504  /50x.html;</span></span><br><span class="line"><span class="code">    location = /50x.html &#123;</span></span><br><span class="line"><span class="code">        root   /usr/share/nginx/html;</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="code">    # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></span><br><span class="line"><span class="code">    #</span></span><br><span class="line"><span class="code">    #location ~ \.php$ &#123;</span></span><br><span class="line"><span class="code">    #    proxy_pass   http://127.0.0.1;</span></span><br><span class="line"><span class="code">    #&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="code">    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class="line"><span class="code">    #</span></span><br><span class="line"><span class="code">    #location ~ \.php$ &#123;</span></span><br><span class="line"><span class="code">    #    root           html;</span></span><br><span class="line"><span class="code">    #    fastcgi_pass   127.0.0.1:9000;</span></span><br><span class="line"><span class="code">    #    fastcgi_index  index.php;</span></span><br><span class="line"><span class="code">    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span></span><br><span class="line"><span class="code">    #    include        fastcgi_params;</span></span><br><span class="line"><span class="code">    #&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="code">    # deny access to .htaccess files, if Apache's document root</span></span><br><span class="line"><span class="code">    # concurs with nginx's one</span></span><br><span class="line"><span class="code">    #</span></span><br><span class="line"><span class="code">    #location ~ /\.ht &#123;</span></span><br><span class="line"><span class="code">    #    deny  all;</span></span><br><span class="line"><span class="code">    #&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成后执行以下命令启动docker版nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --restart=always --name nginx -v /srv/nginx-data/conf:/etc/nginx/conf.d:ro -p 80:80 -p 443:443 nginx</span><br></pre></td></tr></table></figure><p>其中一些参数的含义如下：</p><ul><li><code>-d</code>代表后台运行</li><li><code>--restart=always</code>代表docker启动的时候该container也一起启动</li><li><code>-name</code>给该容器命名方便管理</li><li><code>-v</code>映射目录，格式<code>host目录:container目录(:ro)</code>，ro代表只读（read-only）</li><li><code>-p</code>开放指定端口，格式<code>host端口:container端口</code></li></ul><p>如果要修改nginx的配置文件，一般都要执行<code>nginx -t</code>测试和<code>nginx -s reload</code>来使生效，而在docker下就要执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> nginx /usr/sbin/nginx -t</span><br><span class="line">docker <span class="built_in">exec</span> nginx /usr/sbin/nginx -s reload</span><br></pre></td></tr></table></figure><h2 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h2><blockquote><p><a href="https://git-scm.com/book/zh/v2/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E7%94%9F%E6%88%90-SSH-%E5%85%AC%E9%92%A5#r_generate_ssh_key" target="_blank" rel="noopener">4.3 服务器上的 Git - 生成 SSH 公钥</a><br><a href="https://wangchujiang.com/linux-command/c/firewall-cmd.html" target="_blank" rel="noopener">firewall-cmd</a><br><a href="https://www.jianshu.com/p/c18d5347c9b6" target="_blank" rel="noopener">Centos7 修改SSH 端口</a><br><a href="https://docs.docker.com/install/linux/docker-ce/centos/" target="_blank" rel="noopener">Get Docker Engine - Community for CentOS</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h2&gt;&lt;p&gt;无意中看到腾讯云服务器的&lt;a href=&quot;https://cloud.tencent.com/act/campus?fromSource=gwzcw
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>通过brew cask安装指定版本的应用</title>
    <link href="http://lougazen.github.io/2019/12/17/%E9%80%9A%E8%BF%87brew-cask%E5%AE%89%E8%A3%85%E6%8C%87%E5%AE%9A%E7%89%88%E6%9C%AC%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>http://lougazen.github.io/2019/12/17/通过brew-cask安装指定版本的应用/</id>
    <published>2019-12-17T14:58:25.000Z</published>
    <updated>2019-12-23T04:00:43.925Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>最近在全新安装DataGrip(2019.3)的时候发现使用以前的洗白工具无法输入序列号，但是从2019.2版本升上来的idea和webstorm却能正常使用。作为一名idea系列的重度使（bai）用（piao）者实在是难受，首先想到的办法就是安装一个旧版本的DataGrip。但是Cask却不像Formulae通过一个@就能指定版本号，需要另辟蹊径。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>先把DataGrip完全卸载<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/17/cEWU3ZDBgvsYKHt.png" alt="卸载DataGrip" title="">                </div>                <div class="image-caption">卸载DataGrip</div>            </figure></p><p>然后执行一波<code>brew update</code>避免待会配置文件被覆盖</p><h2 id="寻找旧版应用的版本号及sha256信息"><a href="#寻找旧版应用的版本号及sha256信息" class="headerlink" title="寻找旧版应用的版本号及sha256信息"></a>寻找旧版应用的版本号及sha256信息</h2><p>对于大多数开发工具来说官网都会给出旧版的软件版本号或者下载地址等其他信息，如果有sha256值提供就在好不过了，可惜<a href="https://www.jetbrains.com/datagrip/download/other.html" target="_blank" rel="noopener">DataGrip</a>没有给出，只好下载回来自己算sha256</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/17/QNCOB5ZTRifz3Mu.png" alt="下载目标版本的DataGrip" title="">                </div>                <div class="image-caption">下载目标版本的DataGrip</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/17/gVTJ1B6ewIvcLus.png" alt="计算哈希" title="">                </div>                <div class="image-caption">计算哈希</div>            </figure><h2 id="替换目标软件的Cask下载源地址"><a href="#替换目标软件的Cask下载源地址" class="headerlink" title="替换目标软件的Cask下载源地址"></a>替换目标软件的Cask下载源地址</h2><p>执行<code>brew cask edit datagrip</code>就会在默认编辑器打开这个软件的配置文件</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/17/UnozwtJDTMFXYh9.png" alt="brew cask edit datagrip" title="">                </div>                <div class="image-caption">brew cask edit datagrip</div>            </figure><p>我们主要改的是红框中的两个信息，把它替换成指定版本的应用信息，保存退出</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/17/r569XZWOVjmcEwo.png" alt="修改版本号和哈希" title="">                </div>                <div class="image-caption">修改版本号和哈希</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/17/tLVYFqg8nT2bKGz.png" alt="修改版本号和哈希" title="">                </div>                <div class="image-caption">修改版本号和哈希</div>            </figure><p>很明显这个配置文件所在的目录是个git仓库，所以改错了不用怕，到时候一波<code>git reset --hard</code>即可复原</p><h2 id="执行安装命令"><a href="#执行安装命令" class="headerlink" title="执行安装命令"></a>执行安装命令</h2><p>这个时候执行<code>brew cask install datagrip</code>，顺利的话就会自动下载旧版本并且顺利安装</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/17/oaHz1MYjsRQ9wp6.png" alt="brew cask install datagrip" title="">                </div>                <div class="image-caption">brew cask install datagrip</div>            </figure><h2 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h2><blockquote><p><a href="https://zeckli.github.io/en/2016/11/05/use-homebrew-cask-to-downgrad-or-install-en.html" target="_blank" rel="noopener">Use Homebrew Cask to downgrade or install specific version of package</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h2&gt;&lt;p&gt;最近在全新安装DataGrip(2019.3)的时候发现使用以前的洗白工具无法输入序列号，但是从2019.2版本升上来的idea和webstorm却
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>打造Mac下舒适的终端</title>
    <link href="http://lougazen.github.io/2019/12/12/%E6%89%93%E9%80%A0Mac%E4%B8%8B%E8%88%92%E9%80%82%E7%9A%84%E7%BB%88%E7%AB%AF/"/>
    <id>http://lougazen.github.io/2019/12/12/打造Mac下舒适的终端/</id>
    <published>2019-12-12T15:54:46.000Z</published>
    <updated>2019-12-23T04:00:43.924Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>拖延症拖了一年终于要开始打造自己的博客了<em>(´ཀ`」 ∠)</em>，先拿最近捣鼓的zsh开刀吧</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p><a href="https://brew.sh/index_zh-cn" target="_blank" rel="noopener">brew</a>、iTerm2和<a href="https://ohmyz.sh/" target="_blank" rel="noopener">Oh-My-Zsh</a></p><p>使用brew安装nerd-font字体</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew tap caskroom/fonts</span><br><span class="line">brew cask install font-hack-nerd-font</span><br></pre></td></tr></table></figure><p>配置iTerm2针对非ASCII码字符的字体</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/16/moWqMef9wHILBYU.png" alt="配置iTerm2针对非ASCII码字符的字体" title="">                </div>                <div class="image-caption">配置iTerm2针对非ASCII码字符的字体</div>            </figure><h2 id="配置zsh主题"><a href="#配置zsh主题" class="headerlink" title="配置zsh主题"></a>配置zsh主题</h2><p>zsh的配置文件存放在<code>~/.zshrc</code>下，看到</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZSH_THEME="robbyrussell"</span><br></pre></td></tr></table></figure><p>这一行，这里就是配置主题的地方，默认自带一堆主题放在<code>~/.oh-my-zsh/theme</code>目录下，也可以上<a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes" target="_blank" rel="noopener">github</a>上查看各个主题的效果</p><p>当然个人感觉最叼的还是这个<a href="https://github.com/Powerlevel9k/powerlevel9k" target="_blank" rel="noopener">powerlevel9k</a>主题</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/16/NUrfXGsnjuo8Zxv.gif" alt="powerlevel9k主题" title="">                </div>                <div class="image-caption">powerlevel9k主题</div>            </figure><p>首先把主题安装到本地</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/bhilburn/powerlevel9k.git ~/.oh-my-zsh/custom/themes/powerlevel9k</span><br></pre></td></tr></table></figure><p>修改<code>~/.zshrc</code>的主题配置</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZSH_THEME="powerlevel9k/powerlevel9k"</span><br></pre></td></tr></table></figure><p>重新加载zsh使配置生效</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure><p>然后提示就变样了（先忽略苹果logo的信息，后面会提到）</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/16/pCnDS4baKfAdetZ.png" alt="安装powerlevel9k" title="">                </div>                <div class="image-caption">安装powerlevel9k</div>            </figure><p>根据自己的喜好配置一下（注意需要加在ZSH_THEME的前面，不然前面说的nerd-font字体会加载不出来），详细可进入p9k的github阅读原文档</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POWERLEVEL9K_MODE="nerdfont-complete"</span><br><span class="line">POWERLEVEL9K<span class="emphasis">_LEFT_</span>PROMPT<span class="emphasis">_ELEMENTS=(os_</span>icon root<span class="emphasis">_indicator context ssh dir_</span>writable dir vcs status)</span><br><span class="line">POWERLEVEL9K<span class="emphasis">_RIGHT_</span>PROMPT_ELEMENTS=()</span><br><span class="line">POWERLEVEL9K<span class="emphasis">_PROMPT_</span>ADD_NEWLINE=true</span><br></pre></td></tr></table></figure><ul><li><code>POWERLEVEL9K_MODE</code>：设置 powerlevel9k 的字体是我们前面下载的</li><li><code>POWERLEVEL9K_LEFT_PROMPT_ELEMENTS</code>：将前面居右的几个元素放在左边了</li><li><code>POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS</code>：右边不放置任何元素（如果你喜欢在右边也可以加）</li><li><code>POWERLEVEL9K_PROMPT_ADD_NEWLINE</code>：在每个提示之前添加换行符</li></ul><p>修改完的效果应该是这样子的</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/16/6xi9PybSLRKcJz3.png" alt="配置powerlevel9k" title="">                </div>                <div class="image-caption">配置powerlevel9k</div>            </figure><h2 id="配置iTerm2配色"><a href="#配置iTerm2配色" class="headerlink" title="配置iTerm2配色"></a>配置iTerm2配色</h2><p>iTerm2默认黑色还是太丑了，上<a href="https://github.com/mbadolato/iTerm2-Color-Schemes" target="_blank" rel="noopener">这里</a>挑了个Ubuntu主题</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/16/CynTDgk7PRGXh8f.png" alt="iTerm2配色" title="">                </div>                <div class="image-caption">iTerm2配色</div>            </figure><p>啊舒服了٩(๑´0`๑)۶</p><h2 id="安装zsh插件"><a href="#安装zsh插件" class="headerlink" title="安装zsh插件"></a>安装zsh插件</h2><p>以上那些都是过眼隐的，真正让使用者感到舒服的地方来了</p><p>先列一下我的插件列表</p><ul><li>git</li><li>zsh-syntax-highlighting</li><li>zsh-autosuggestions</li><li>command-not-found</li><li>zsh_reload</li><li>git-open</li><li>z</li><li>safe-paste</li><li>sudo</li><li>extract</li></ul><h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><p>默认自带，不说</p><h3 id="zsh-syntax-highlighting"><a href="#zsh-syntax-highlighting" class="headerlink" title="zsh-syntax-highlighting"></a>zsh-syntax-highlighting</h3><p>用于显示你当前输入的命令是否正确</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install zsh-syntax-highlighting</span><br></pre></td></tr></table></figure><p>正常来讲可以直接把<code>zsh-syntax-highlighting</code>加到配置文件中即可启用，如果出现<code>plugin not found</code>的情况则改用如下方式进行配置</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</span><br></pre></td></tr></table></figure><h3 id="zsh-autosuggestions"><a href="#zsh-autosuggestions" class="headerlink" title="zsh-autosuggestions"></a>zsh-autosuggestions</h3><p>历史记录提示，按➡️方向键自动补全</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install zsh-autosuggestions</span><br></pre></td></tr></table></figure><p>跟上一个配置同理，如果出现<code>plugin not found</code>的情况则改用如下方式进行配置</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /usr/local/share/zsh-autosuggestions/zsh-autosuggestions.zsh</span><br></pre></td></tr></table></figure><h3 id="command-not-found"><a href="#command-not-found" class="headerlink" title="command-not-found"></a>command-not-found</h3><p>对于command not found的结果会提示一个相似的命令（多出现于拼写错误）</p><h3 id="zsh-reload"><a href="#zsh-reload" class="headerlink" title="zsh_reload"></a>zsh_reload</h3><p>直接执行<code>src</code>即可完成<code>source ~/.zshrc</code>操作</p><h3 id="git-open"><a href="#git-open" class="headerlink" title="git-open"></a>git-open</h3><p>在终端里打开当前项目的远程仓库地址</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/paulirish/git-open.git $ZSH_CUSTOM/plugins/git-open</span><br></pre></td></tr></table></figure><h3 id="z"><a href="#z" class="headerlink" title="z"></a>z</h3><p>zsh自带的autojump</p><h3 id="safe-paste"><a href="#safe-paste" class="headerlink" title="safe-paste"></a>safe-paste</h3><p>顾名思义，对于有换行符的内容不会立马执行</p><h3 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h3><p>双击 Esc，zsh 会把上一条命令加上 sudo 给你</p><h3 id="extract"><a href="#extract" class="headerlink" title="extract"></a>extract</h3><p>万能解压命令</p><h2 id="其他非zsh的插件"><a href="#其他非zsh的插件" class="headerlink" title="其他非zsh的插件"></a>其他非zsh的插件</h2><h3 id="colorls"><a href="#colorls" class="headerlink" title="colorls"></a>colorls</h3><p>列出文件时带图标</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem install colorls</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/16/qrk1oOXgwPUsd4p.png" alt="colorls" title="">                </div>                <div class="image-caption">colorls</div>            </figure><p>然后加个alias到配置文件</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alias cll='colorls -l --gs'</span><br></pre></td></tr></table></figure><p>以后输入<code>cll</code>即可</p><h3 id="archey"><a href="#archey" class="headerlink" title="archey"></a>archey</h3><p>显示系统信息</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install archey</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/16/85scRPWveNCi4kM.png" alt="archey" title="">                </div>                <div class="image-caption">archey</div>            </figure><p>然后把<code>archey</code>这个命令加到配置文件即可每次打开都显示系统信息</p><p>顺带提一下archey那种图案的生成方式，有两个小工具可以做到，一个是figlet，另一个是toilet</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew install figlet</span><br><span class="line">brew install toilet</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/16/gwlevVHQUCZAFr6.png" alt="figlet与toilet" title="">                </div>                <div class="image-caption">figlet与toilet</div>            </figure><h2 id="后记（挖坑）"><a href="#后记（挖坑）" class="headerlink" title="后记（挖坑）"></a><del>后记（挖坑）</del></h2><p><del>这一套下来在iTerm下面使用简直是强无敌，但是考虑还有系统自带的终端及idea和vscode的终端都要配置一遍是在是烦躁，在寻找有没有办法针对不同的shell加载不同的配置文件</del></p><h2 id="（2019-12-22填坑）针对不同终端使用不同的主题"><a href="#（2019-12-22填坑）针对不同终端使用不同的主题" class="headerlink" title="（2019-12-22填坑）针对不同终端使用不同的主题"></a>（2019-12-22填坑）针对不同终端使用不同的主题</h2><p>通过查看<a href="https://github.com/obihann/archey-osx/blob/master/bin/archey" target="_blank" rel="noopener">archey</a>发现，终端软件（不是shell）的信息存放在<code>${TERM_PROGRAM}</code>这个变量里，遂修把配置文件中<code>ZSH_THEME=&quot;powerlevel9k/powerlevel9k&quot;</code>这一行改为</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if [ "$&#123;TERM_PROGRAM&#125;" = "iTerm.app" ]; then</span><br><span class="line"><span class="code">    POWERLEVEL9K_MODE="nerdfont-complete"</span></span><br><span class="line"><span class="code">    POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(os_icon root_indicator context ssh dir_writable dir vcs status)</span></span><br><span class="line"><span class="code">    POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=()</span></span><br><span class="line"><span class="code">    POWERLEVEL9K_PROMPT_ADD_NEWLINE=true</span></span><br><span class="line"><span class="code">    ZSH_THEME="powerlevel9k/powerlevel9k"</span></span><br><span class="line">else</span><br><span class="line"><span class="code">    ZSH_THEME="ys"</span></span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>（顺便把powerlevel9k的一些配置也放到了一起）</p><p>最终效果</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/22/6pcKn2rWsANwaMf.png" alt="自带Terminal和vscode" title="">                </div>                <div class="image-caption">自带Terminal和vscode</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/22/euFiva8HWTqzMk1.png" alt="iTerm" title="">                </div>                <div class="image-caption">iTerm</div>            </figure><p>完美<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/22/XiYMjbp7cIRslaE.gif" alt="👏" title="">                </div>                <div class="image-caption">👏</div>            </figure></p><h2 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h2><blockquote><p><a href="https://blog.biezhi.me/2018/11/build-a-beautiful-mac-terminal-environment.html" target="_blank" rel="noopener">打造 Mac 下高颜值好用的终端环境</a><br><a href="https://github.com/ohmyzsh/ohmyzsh" target="_blank" rel="noopener">oh-my-zsh</a><br><a href="https://github.com/Powerlevel9k/powerlevel9k" target="_blank" rel="noopener">powerlevel9k</a><br><a href="https://github.com/mbadolato/iTerm2-Color-Schemes" target="_blank" rel="noopener">iTerm2-Color-Schemes</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h2&gt;&lt;p&gt;拖延症拖了一年终于要开始打造自己的博客了&lt;em&gt;(´ཀ`」 ∠)&lt;/em&gt;，先拿最近捣鼓的zsh开刀吧&lt;/p&gt;
&lt;h2 id=&quot;准备&quot;&gt;&lt;a hre
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://lougazen.github.io/2018/12/05/hello-world/"/>
    <id>http://lougazen.github.io/2018/12/05/hello-world/</id>
    <published>2018-12-05T14:21:31.000Z</published>
    <updated>2019-12-23T09:40:32.322Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
